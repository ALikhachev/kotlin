apply plugin: 'kotlin-multiplatform'

repositories {
    mavenLocal()
    jcenter()
    maven { url  "https://dl.bintray.com/kotlin/kotlinx.html/" }
}

kotlin {
    sourceSets {
        allNative
        nativeTest

        macos64Main { dependsOn sourceSets.allNative }
        linux64Main { dependsOn sourceSets.allNative }
        mingw64Main { dependsOn sourceSets.allNative }
        mingw86Main { dependsOn sourceSets.allNative }

        macos64Test { dependsOn sourceSets.nativeTest }
        linux64Test { dependsOn sourceSets.nativeTest }
        mingw64Test { dependsOn sourceSets.nativeTest }
        mingw86Test { dependsOn sourceSets.nativeTest }

        stdioInterop {}
        allNative.dependsOn(stdioInterop)
    }

    targets {
        fromPreset(presets.macosX64, 'macos64')
        fromPreset(presets.linuxX64, 'linux64')
        fromPreset(presets.mingwX64, 'mingw64')
        // Test building a 32-bit Windows binary.
        fromPreset(presets.mingwX86, 'mingw86')

        configure([macos64, linux64, mingw64, mingw86]) {
            compilations.main.cinterops {
                stdio {
                    packageName 'example.cinterop.project.stdio'
                    extraOpts '-nodefaultlibs'
                    compilerOpts '-DEVEN_NUMBER'
                }
            }
        }
    }
}

// Workaround for missing cinterops commonization, to ensure that the shared-native source set
// gets a cinterop klib in the 'classpath', and the cinterop klib is published in the metadata
// artifact and consumed:
registerInteropAsSourceSetOutput(project, "stdio", kotlin.sourceSets.stdioInterop)
